// Generated by CoffeeScript 1.7.1
(function() {
  var FS, TIDES, TRM, TYPES, alert, bSearch, badge, debug, echo, help, info, log, njs_fs, njs_path, rpr, warn, whisper;

  njs_fs = require('fs');

  njs_path = require('path');

  TYPES = require('coffeenode-types');

  FS = require('coffeenode-fs');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'TIDES/main';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  bSearch = require('coffeenode-bsearch');

  this.options = require('../options');

  TIDES = require('./main');


  /* TAINT global setting */

  TRM.depth_of_inspect = 2;

  this._demo_walk_tidal_and_lunar_phase_events = function() {
    var route;
    route = njs_path.join(__dirname, '../tidal-data/Vlieland-haven.txt');
    TIDES.walk_tidal_and_lunar_phase_events(route, (function(_this) {
      return function(error, event) {
        var ap, category, date, date_txt, declination_deg, distance_km, height, hl, quarter, sn, symbol, type;
        if (error != null) {
          throw error;
        }
        if (event === null) {
          return;
        }
        date = event['date'];
        date_txt = date != null ? date.format('dddd, D. MMMM YYYY HH:mm') : './.';
        switch (type = TYPES.type_of(event)) {
          case 'TIDES/lunar-event':
            switch (category = event['category']) {
              case 'phase':
                quarter = event['marker'];
                symbol = TIDES.options['data']['moon']['unicode'][quarter];
                return log(TRM.lime(date_txt, quarter, symbol));
              case 'distance':
                ap = event['marker'];
                distance_km = event['details']['distance.km'];
                return log(TRM.blue(date_txt, ap, "" + distance_km + "km"));
              case 'declination':
                sn = event['marker'];
                declination_deg = event['details']['declination.deg'];
                return log(TRM.orange(date_txt, sn, "" + declination_deg + "Â°"));
              default:
                return warn("skipped event with category " + (rpr(category)));
            }
            break;
          case 'TIDES/tidal-event':
            hl = event['hl'];
            height = event['height'];
            return log(TRM.gold(date_txt, hl, height));
          case 'TIDES/tidal-extrema-event':
            return log(TRM.cyan(event));
          default:
            return warn("unhandled event of type " + (rpr(type)));
        }
      };
    })(this));
    return null;
  };

  this._demo_align_tide_and_moon_events = function() {
    var collect, get_compare, lunar_events, route, splice, tidal_events;
    route = njs_path.join(__dirname, '../tidal-data/Yerseke.txt');
    tidal_events = [];
    lunar_events = [];
    get_compare = (function(_this) {
      return function(probe_event) {
        return function(data_event) {
          return probe_event['date'] - data_event['date'];
        };
      };
    })(this);
    collect = (function(_this) {
      return function(handler) {
        return TIDES.walk_tide_and_moon_events(route, function(error, event) {
          var type;
          if (error != null) {
            return handler(error);
          }
          if (event === null) {
            return handler(null);
          }
          switch (type = TYPES.type_of(event)) {
            case 'TIDES/lunar-event':
              return lunar_events.push(event);
            case 'TIDES/tidal-event':
              return tidal_events.push(event);
            default:
              return warn("unhandled event of type " + (rpr(type)));
          }
        });
      };
    })(this);
    splice = (function(_this) {
      return function() {
        return collect(function(error) {
          var collection, idx, lunar_date, lunar_date_txt, lunar_event, lunar_event_txt, tidal_date, tidal_date_txt, tidal_event, tidal_event_txt, _i, _len, _ref, _results;
          if (error != null) {
            throw error;
          }
          _ref = [lunar_events];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            collection = _ref[_i];
            _results.push((function() {
              var _j, _len1, _results1;
              _results1 = [];
              for (_j = 0, _len1 = lunar_events.length; _j < _len1; _j++) {
                lunar_event = lunar_events[_j];
                lunar_date = lunar_event['date'];
                lunar_date_txt = lunar_date.format('YY-MM-DD HH:mm Z', 'Europe/Amsterdam');
                lunar_event_txt = "" + lunar_date_txt + " " + lunar_event['quarter'];
                idx = bSearch.closest(tidal_events, get_compare(lunar_event));
                tidal_event = tidal_events[idx];
                tidal_date = tidal_event['date'];
                tidal_date_txt = tidal_date.format('YY-MM-DD HH:mm Z', 'Europe/Amsterdam');
                tidal_event_txt = "" + tidal_date_txt + " " + tidal_event['hl'];
                _results1.push(log(TRM.lime(tidal_event_txt), TRM.gold(lunar_event_txt)));
              }
              return _results1;
            })());
          }
          return _results;
        });
      };
    })(this);
    splice();
    return null;
  };

  this._demo_walk = function() {
    var last_moon_idx, route, tide_idx, tide_moon_counts, _;
    _ = require('lodash');
    TIDES = this;
    route = njs_path.join(__dirname, '../tidal-data/Vlieland-haven.txt');
    tide_moon_counts = [];
    tide_idx = 0;
    last_moon_idx = null;
    TIDES.walk(route, (function(_this) {
      return function(error, event) {
        var date, date_txt, event_txt, height, hl, moon_event, quarter, symbol;
        if (error != null) {
          throw error;
        }
        if (event === null) {
          info(_.countBy(tide_moon_counts));
          return;
        }
        tide_idx += 1;
        date = event['date'];
        date_txt = date.format('ddd, DD. MMM YYYY HH:mm');
        hl = event['hl'];
        height = event['height'];
        event_txt = TRM.gold(date_txt, hl, height);
        if ((moon_event = event['moon']) != null) {
          if (moon_event['quarter'] === 0) {
            if (last_moon_idx != null) {
              tide_moon_counts.push(tide_idx - last_moon_idx);
            }
            last_moon_idx = tide_idx;
          }
          date = moon_event['date'];
          date_txt = date.format('ddd, D. MMM YYYY HH:mm');
          quarter = moon_event['quarter'];
          symbol = TIDES.options['data']['moon']['unicode'][quarter];
          event_txt += ' ' + TRM.lime(date_txt, quarter, symbol);
        }
        return log(event_txt);
      };
    })(this));
    return null;
  };

  this._demo_walk_lunar_events = function() {
    this.walk_lunar_distance_events(function(error, event) {
      if (error != null) {
        throw error;
      }
      if (event === null) {
        return;
      }
      return debug(event['category'], event['marker'], event['date'].toString(), event['details']);
    });
    return this.walk_lunar_declination_events(function(error, event) {
      if (error != null) {
        throw error;
      }
      if (event === null) {
        return;
      }
      return debug(event['category'], event['marker'], event['date'].toString(), event['details']);
    });
  };

  this._demo_momentjs = function() {
    var first_quarter, hi_idx, high_and_low_water_times, hours, idx, lo_idx, milliseconds, minutes, seconds, twelve_hours, _i, _ref, _results;
    info(moment() - moment('2012-01-01'));
    info;
    high_and_low_water_times = [new Date('2014-12-27T00:51'), new Date('2014-12-27T07:12'), new Date('2014-12-27T13:20'), new Date('2014-12-27T19:46'), new Date('2014-12-28T01:45'), new Date('2014-12-28T08:06'), new Date('2014-12-28T14:16'), new Date('2014-12-28T20:40'), new Date('2014-12-29T02:41'), new Date('2014-12-29T08:58'), new Date('2014-12-29T15:10'), new Date('2014-12-29T21:38'), new Date('2014-12-30T03:35'), new Date('2014-12-30T10:02'), new Date('2014-12-30T16:09'), new Date('2014-12-30T22:45')];
    first_quarter = new Date('2014-12-28T19:31');
    idx = bSearch.closest(high_and_low_water_times, first_quarter);
    info('first quarter:                         ', first_quarter);
    info();
    info('closest tidal event:                   ', high_and_low_water_times[idx]);
    info();
    milliseconds = 1;
    seconds = 1000 * milliseconds;
    minutes = 60 * seconds;
    hours = 60 * minutes;
    twelve_hours = 12 * hours;
    _ref = bSearch.interval(high_and_low_water_times, function(value) {
      var dt;
      dt = first_quarter - value;
      if ((Math.abs(dt)) <= twelve_hours) {
        return 0;
      }
      if (dt > 0) {
        return +1;
      }
      return -1;
    }), lo_idx = _ref[0], hi_idx = _ref[1];
    _results = [];
    for (idx = _i = lo_idx; lo_idx <= hi_idx ? _i <= hi_idx : _i >= hi_idx; idx = lo_idx <= hi_idx ? ++_i : --_i) {
      _results.push(info('tidal event closer than twelve hours:  ', high_and_low_water_times[idx]));
    }
    return _results;
  };

  if (module.parent == null) {
    this._demo_walk_tidal_and_lunar_phase_events();
  }

}).call(this);
