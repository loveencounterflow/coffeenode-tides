// Generated by CoffeeScript 1.7.1
(function() {
  var FS, TIDES, TRM, TYPES, alert, bSearch, badge, debug, echo, help, info, log, njs_fs, njs_path, rpr, warn, whisper;

  njs_fs = require('fs');

  njs_path = require('path');

  TYPES = require('coffeenode-types');

  FS = require('coffeenode-fs');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'TIDES/main';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  bSearch = require('coffeenode-bsearch');

  this.options = require('../options');

  TIDES = require('./main');


  /* TAINT global setting */

  TRM.depth_of_inspect = 2;

  this.walk_tidal_and_lunar_phase_event_batches = function() {
    var route;
    route = njs_path.join(__dirname, '../tidal-data/Vlieland-haven.txt');
    TIDES.read_tidal_and_lunar_event_batches(route, (function(_this) {
      return function(error, event_batches) {
        var ap, category, date, date_txt, declination_deg, distance_km, event, event_batch, height, hl, quarter, sn, symbol, type, _i, _len, _results;
        if (error != null) {
          throw error;
        }
        _results = [];
        for (_i = 0, _len = event_batches.length; _i < _len; _i++) {
          event_batch = event_batches[_i];
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = event_batch.length; _j < _len1; _j++) {
              event = event_batch[_j];
              date = event['date'];
              date_txt = date != null ? date.format('dddd, D. MMMM YYYY HH:mm') : './.';
              switch (type = TYPES.type_of(event)) {
                case 'TIDES/lunar-event':
                  switch (category = event['category']) {
                    case 'phase':
                      quarter = event['marker'];
                      symbol = TIDES.options['data']['moon']['unicode'][quarter];
                      _results1.push(log(TRM.lime(date_txt, quarter, symbol)));
                      break;
                    case 'distance':
                      ap = event['marker'];
                      distance_km = event['details']['distance.km'];
                      _results1.push(log(TRM.blue(date_txt, ap, "" + distance_km + "km")));
                      break;
                    case 'declination':
                      sn = event['marker'];
                      declination_deg = event['details']['declination.deg'];
                      _results1.push(log(TRM.orange(date_txt, sn, "" + declination_deg + "°")));
                      break;
                    default:
                      _results1.push(warn("skipped event with category " + (rpr(category))));
                  }
                  break;
                case 'TIDES/tidal-event':
                  hl = event['hl'];
                  height = event['height'];
                  _results1.push(log(TRM.gold(date_txt, hl, height)));
                  break;
                case 'TIDES/tidal-extrema-event':
                  _results1.push(log(TRM.cyan(event)));
                  break;
                default:
                  _results1.push(warn("unhandled event of type " + (rpr(type))));
              }
            }
            return _results1;
          })());
        }
        return _results;
      };
    })(this));
    return null;
  };

  this.read_aligned_events = function() {
    var route;
    route = njs_path.join(__dirname, '../tidal-data/Vlieland-haven.txt');
    return TIDES.read_aligned_events(route, (function(_this) {
      return function(error, event_batches) {
        var ap, date_txt, declination_deg, distance_ed, distance_km, height, hl, primary_event, quarter, secondary_event, secondary_events, sn, symbol, tidal_extrema_event_batch, tidal_hl_event_batch, _i, _len, _results;
        if (error != null) {
          throw error;
        }
        tidal_extrema_event_batch = event_batches[0], tidal_hl_event_batch = event_batches[1];
        _results = [];
        for (_i = 0, _len = tidal_hl_event_batch.length; _i < _len; _i++) {
          primary_event = tidal_hl_event_batch[_i];
          date_txt = primary_event['date'].format('dd DD.MM.YYYY HH:mm');
          hl = primary_event['hl'];
          height = primary_event['height'];
          log(TRM.gold(date_txt, hl, height));
          secondary_events = primary_event['lunar-events'];
          if ((secondary_event = secondary_events['phase']) != null) {
            date_txt = secondary_event['date'].format('dd DD.MM.YYYY HH:mm');
            quarter = secondary_event['marker'];
            symbol = TIDES.options['data']['moon']['unicode'][quarter];
            log(TRM.lime(date_txt, quarter, symbol));
          }
          if ((secondary_event = secondary_events['distance']) != null) {
            date_txt = secondary_event['date'].format('dd DD.MM.YYYY HH:mm');
            ap = secondary_event['marker'];
            distance_km = secondary_event['details']['distance.km'];
            distance_ed = distance_km / 12742;
            log(TRM.blue(date_txt, ap, "" + distance_ed + "ed"));
          }
          if ((secondary_event = secondary_events['declination']) != null) {
            date_txt = secondary_event['date'].format('dd DD.MM.YYYY HH:mm');
            sn = secondary_event['marker'];
            declination_deg = secondary_event['details']['declination.deg'];
            _results.push(log(TRM.red(date_txt, sn, "" + declination_deg + "°")));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
    })(this));
  };

  this._demo_momentjs = function() {
    var first_quarter, hi_idx, high_and_low_water_times, hours, idx, lo_idx, milliseconds, minutes, seconds, twelve_hours, _i, _ref, _results;
    info(moment() - moment('2012-01-01'));
    info;
    high_and_low_water_times = [new Date('2014-12-27T00:51'), new Date('2014-12-27T07:12'), new Date('2014-12-27T13:20'), new Date('2014-12-27T19:46'), new Date('2014-12-28T01:45'), new Date('2014-12-28T08:06'), new Date('2014-12-28T14:16'), new Date('2014-12-28T20:40'), new Date('2014-12-29T02:41'), new Date('2014-12-29T08:58'), new Date('2014-12-29T15:10'), new Date('2014-12-29T21:38'), new Date('2014-12-30T03:35'), new Date('2014-12-30T10:02'), new Date('2014-12-30T16:09'), new Date('2014-12-30T22:45')];
    first_quarter = new Date('2014-12-28T19:31');
    idx = bSearch.closest(high_and_low_water_times, first_quarter);
    info('first quarter:                         ', first_quarter);
    info();
    info('closest tidal event:                   ', high_and_low_water_times[idx]);
    info();
    milliseconds = 1;
    seconds = 1000 * milliseconds;
    minutes = 60 * seconds;
    hours = 60 * minutes;
    twelve_hours = 12 * hours;
    _ref = bSearch.interval(high_and_low_water_times, function(value) {
      var dt;
      dt = first_quarter - value;
      if ((Math.abs(dt)) <= twelve_hours) {
        return 0;
      }
      if (dt > 0) {
        return +1;
      }
      return -1;
    }), lo_idx = _ref[0], hi_idx = _ref[1];
    _results = [];
    for (idx = _i = lo_idx; lo_idx <= hi_idx ? _i <= hi_idx : _i >= hi_idx; idx = lo_idx <= hi_idx ? ++_i : --_i) {
      _results.push(info('tidal event closer than twelve hours:  ', high_and_low_water_times[idx]));
    }
    return _results;
  };

  if (module.parent == null) {
    this.read_aligned_events();
  }

}).call(this);
