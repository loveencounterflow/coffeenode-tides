// Generated by CoffeeScript 1.7.1
(function() {
  var TEX, TIDES, TRM, TYPES, alert, badge, cline, debug, echo, esc, eventually, hbox, help, hline, hrule, info, leading, leavevmode, log, multicolumn, newline, next_cell, next_line, njs_fs, njs_path, postscript, preamble, read, rpr, thinspace, warn, whisper,
    __slice = [].slice;

  njs_fs = require('fs');

  njs_path = require('path');

  TYPES = require('coffeenode-types');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'TIDES/write-tex';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  eventually = process.nextTick;

  TEX = require('jizura-xelatex');

  TIDES = require('./main');

  this._draw_curves_with_gm = require('./draw-curves-with-gm');

  read = function(route) {
    return njs_fs.readFileSync(njs_path.join(__dirname, route), {
      encoding: 'utf-8'
    });
  };

  preamble = read('../tex-inputs/preamble.tex');

  postscript = read('../tex-inputs/postscript.tex');

  this._as_integer = function(hint) {
    return parseInt(hint, 10);
  };

  leavevmode = TEX.make_command('leavevmode');

  hbox = TEX.make_command('hbox');

  leading = TEX.make_command('leading');

  multicolumn = TEX.make_multicommand('multicolumn', 3);

  hrule = TEX.raw("\n\n\\hrule\n\n");

  hline = TEX.raw("\n\\hline\n");

  cline = TEX.make_command('cline');

  this.new_tabular = TEX.make_environment('tabular');

  next_line = TEX.raw('\\\\\n');

  newline = TEX.raw('\n');

  next_cell = TEX.raw(' & ');

  esc = TEX._escape.bind(TEX);

  thinspace = TEX.raw('$\\thinspace$');

  thinspace = '\u2009';

  this.moon_symbols = {
    'unicode': ['⬤', '◐', '◯', '◑'],
    'plain': ['\\newmoon', '\\rightmoon', '\\fullmoon', '\\leftmoon']
  };

  this.weekday_names = {
    'dutch': {
      'full': ['maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag', 'zondag'],
      'abbreviated': ['ma', 'di', 'wo', 'do', 'vr', 'za', 'zo']
    }
  };

  this.month_names = {
    'dutch': {
      'full': ['januari', 'februari', 'maart', 'april', 'mei', 'juni', 'juli', 'augustus', 'september', 'oktober', 'november', 'december'],
      'abbreviated': ['jan', 'feb', 'maart', 'apr', 'mei', 'juni', 'juli', 'aug', 'sept', 'oct', 'nov', 'dec']
    }
  };

  this.get_month_name = function(month, language, style) {
    var R, _ref, _ref1;
    if (!TYPES.isa_number(month)) {
      month = parseInt(month, 10);
    }
    R = (_ref = this.month_names[language]) != null ? (_ref1 = _ref[style]) != null ? _ref1[month - 1] : void 0 : void 0;
    if (R == null) {
      throw new Error("unable to understand month specification  " + (rpr(month)) + ", " + (rpr(language)) + ", " + (rpr(style)));
    }
    return R;
  };

  this.format_month = function(month) {
    month = this.get_month_name(month, 'dutch', 'abbreviated');
    month = month[0].toUpperCase() + month.slice(1);
    return TEX.new_group([TEX.new_command('color', 'DarkRed'), TEX.new_loner('scFont'), TEX.new_loner('large'), ' ', month]);
  };

  this.new_row = function(table_row) {
    var R, add, day, moon_quarter, time, weekday_idx, weekday_name;
    R = TEX.new_container([]);
    add = function() {
      var P, p, _i, _len;
      P = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = P.length; _i < _len; _i++) {
        p = P[_i];
        TEX.push(R, p);
      }
      return R;
    };
    if (table_row['is-new-day']) {
      add(cline('2-4'));
    }
    if (table_row['day-change']) {
      add(cline('5-5'));
    }
    if ((moon_quarter = table_row['moon-quarter']) != null) {
      add(this.moon_symbols['plain'][moon_quarter]);
    }
    add(next_cell);
    if (table_row['date'] != null) {
      day = table_row['date'][2];
      add(TEX.new_group([TEX.new_loner('itFont'), day]));
      add('.');
    }
    add(next_cell);
    if (table_row['date'] != null) {
      weekday_idx = table_row['weekday-idx'];
      weekday_name = this.weekday_names['dutch']['abbreviated'][weekday_idx];

      /* TAINT use TeX commands for formatting */
      switch (weekday_idx) {
        case 6:

          /* TAINT color repeated here */
          add(TEX.new_group([TEX.new_command('color', 'DarkRed'), TEX.new_loner('itFont'), weekday_name]));
          break;
        default:
          add(TEX.new_group([TEX.new_loner('itFont'), weekday_name]));
      }
    }
    add(next_cell);
    if ((time = table_row['hi-water-time']) != null) {
      add(time[0], thinspace, ':', thinspace, time[1]);
    }
    add(next_cell);
    if ((time = table_row['lo-water-time']) != null) {
      add(time[0], thinspace, ':', thinspace, time[1]);
    }
    add(next_cell);
    add(next_line);
    return R;
  };

  this.draw_curves = function(page_nr, dots, handler) {
    return this._draw_curves_with_gm(page_nr, dots, handler);
  };

  this.y_position_from_datetime = function(row_idx, time, module, unit) {
    var value;
    if (unit == null) {
      unit = 'mm';
    }

    /* TAINT use proper units datatype */

    /* TAINT make prescision configurable */
    value = (row_idx + 1) * module;
    value = value.toFixed(2);
    return "" + value + unit;
  };

  this.main = function() {

    /* TAINT must parametrize data source */
    var dots, last_day, last_month, last_year, moon_quarter, page_nr, route, row_idx, rows, wrote_header;
    route = njs_path.join(__dirname, '../tidal-data/Yerseke.txt');
    rows = TEX.new_container([]);
    row_idx = -1;
    dots = [];
    page_nr = 0;
    last_day = null;
    last_month = null;
    last_year = null;
    moon_quarter = null;
    wrote_header = false;
    echo(preamble);
    return TIDES.walk_tidal_records(route, (function(_this) {
      return function(error, trc) {
        var dst, height, hl, line_count, module, moon_symbol, textheight, this_date, this_day, this_month, this_month_tex, this_time, this_year, unit, x_position, y_position;
        if (error != null) {
          throw error;
        }
        if (trc === null) {
          echo(postscript);
          return;
        }
        row_idx += 1;
        this_date = trc['date'];
        this_time = trc['time'];
        this_year = this_date[0], this_month = this_date[1], this_day = this_date[2];
        if (!wrote_header) {
          this_month_tex = _this.format_month(this_month);
          wrote_header = true;
        }
        if ((moon_quarter = trc['moon-quarter']) != null) {
          if (moon_quarter === 0 || moon_quarter === 2) {

            /* TAINT collect these in a 'newpage' function */
            row_idx = 0;
            page_nr += 1;
            (function(page_nr, dots) {
              if (page_nr < 3) {

                /* TAINT asynchronous handling is missing */
                info("drawing image " + page_nr);
                route = njs_path.join('/tmp', "tides-p" + page_nr + ".png");
                echo("\\paTopLeft*{0mm}{0mm}{\\includegraphics[width=118mm]{" + route + "}}");
                return _this.draw_curves(route, dots, function(error) {
                  info("image " + page_nr + " ok");
                  if (error != null) {
                    throw error;
                  }
                });
              }
            })(page_nr, dots);
            dots = [];
            echo("\\null\\newpage");
          }
        }

        /* TAINT measurements should be defined in options */
        textheight = 178;
        line_count = 62;
        module = textheight / line_count;
        unit = 'mm';
        y_position = _this.y_position_from_datetime(row_idx, this_time, module, unit);

        /* TAINT Unfortunate solution to again ask for moon quarter */
        if (moon_quarter != null) {
          moon_symbol = _this.moon_symbols['plain'][moon_quarter];
          echo("\\paRight{10mm}{" + y_position + "}{" + moon_symbol + "}");
        }
        if (last_day !== this_day) {
          last_day = this_day;

          /* TAINT days y to be adjusted */
          echo("\\paRight{20mm}{" + y_position + "}{" + this_date[1] + "-" + this_date[2] + "}");
        }
        if (last_month !== this_month) {
          last_month = this_month;
          echo("\\typeout{\\trmSolCyan{" + (this_date.join('-')) + "}}");
        }
        hl = trc['hl'];
        height = trc['height'];
        dots.push([hl, [height, dots.length]]);
        switch (hl) {
          case 'h':
            x_position = '40mm';
            break;
          case 'l':
            x_position = '55mm';
            break;
          default:
            throw new Error("expected `h` or `l` for hl indicator, got " + (rpr(hl)));
        }

        /* TAINT use proper escaping */
        dst = trc['is-dst'] ? '+' : '';
        return echo("\\paRight{" + x_position + "}{" + y_position + "}{" + (dst + this_time[0]) + " : " + this_time[1] + "}");
      };
    })(this));
  };

  if (module.parent == null) {
    this.main();
  }

}).call(this);
