// Generated by CoffeeScript 1.7.1
(function() {
  var FS, TIDES, TRM, TYPES, XDate, alert, badge, debug, echo, eventually, help, info, log, new_and_full_moons, njs_fs, njs_path, route, rpr, warn, whisper;

  njs_fs = require('fs');

  njs_path = require('path');

  TYPES = require('coffeenode-types');

  FS = require('coffeenode-fs');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'TIDES/main';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  eventually = process.nextTick;

  XDate = require('xdate');

  this.moon_quarter_by_phases = {
    'NM': 0,
    'EK': 1,
    'VM': 2,
    'LK': 3
  };

  this.new_tidal_record = function(source_line_nr, moon_quarter, date, time, is_dst, hl, height) {
    var R;
    R = {
      '~isa': 'GEZEITEN/tidal-record',
      'source-line-nr': source_line_nr,
      'moon-quarter': moon_quarter,
      'weekday-idx': null,
      'date': date,
      'time': time,
      'is-dst': is_dst,
      'hl': hl,
      'height': height
    };
    return R;
  };

  this.walk_tidal_raw_fields = function(route, handler) {
    FS.lines_of(route, (function(_this) {
      return function(error, source_line, source_line_nr) {
        var fields;
        if (error != null) {
          return handler(error);
        }
        if (source_line === null) {
          return handler(null, null);
        }
        source_line = source_line.trim();
        if (source_line[0] === '#') {
          return;
        }
        fields = source_line.split(/\s+/);
        return handler(null, fields, source_line, source_line_nr);
      };
    })(this));
    return null;
  };

  new_and_full_moons = [];

  this.walk_tidal_records = function(route, handler) {
    var record_idx;
    record_idx = -1;
    this.walk_tidal_raw_fields(route, (function(_this) {
      return function(error, fields, source_line, source_line_nr) {
        var Z, columns, date, date_txt, day_txt, field_count, height, height_txt, hl, hour_txt, idx, ignored, is_dst, last_record_idx, minute_txt, month_txt, moon_phase, moon_quarter, this_record_idx, tide, time, time_txt, xdate, year_txt, _i, _len, _ref, _ref1;
        if (error != null) {
          return handler(error);
        }
        if (fields === null) {
          debug(new_and_full_moons);
          last_record_idx = null;
          for (idx = _i = 0, _len = new_and_full_moons.length; _i < _len; idx = ++_i) {
            this_record_idx = new_and_full_moons[idx];
            if (last_record_idx != null) {
              info(this_record_idx - last_record_idx);
            }
            last_record_idx = this_record_idx;
          }
          return handler(null, null);
        }
        columns = [];
        record_idx += 1;
        switch (field_count = fields.length) {
          case 5:
            date_txt = fields[0], time_txt = fields[1], tide = fields[2], height_txt = fields[3];
            moon_phase = null;
            break;
          case 7:
            date_txt = fields[0], moon_phase = fields[1], ignored = fields[2], time_txt = fields[3], tide = fields[4], height_txt = fields[5];
            break;
          default:
            return handler(new Error("unable to parse line " + source_line_nr + ": " + (rpr(source_line))));
        }
        _ref = date_txt.split('/'), day_txt = _ref[0], month_txt = _ref[1], year_txt = _ref[2];
        _ref1 = time_txt.split(':'), hour_txt = _ref1[0], minute_txt = _ref1[1];
        is_dst = false;
        if (/\+$/.test(minute_txt)) {
          minute_txt = minute_txt.slice(0, minute_txt.length - 1);
          is_dst = true;
        }
        hour_txt = hour_txt.replace(/^0/, ' ');
        day_txt = day_txt.replace(/^0/, ' ');
        month_txt = month_txt.replace(/^0/, ' ');
        height = parseInt(height_txt, 10);
        date = [year_txt, month_txt, day_txt];
        time = [hour_txt, minute_txt];
        moon_quarter = null;
        if (moon_phase != null) {
          moon_quarter = _this.moon_quarter_by_phases[moon_phase];
          if (moon_quarter === 0 || moon_quarter === 2) {
            new_and_full_moons.push(record_idx);
          }
        }
        switch (tide) {
          case 'LW':
            hl = 'l';
            break;
          case 'HW':
            hl = 'h';
            break;
          default:
            return handler(new Error("unable to parse tide entry on line " + source_line_nr + ": " + (rpr(tide))));
        }
        Z = _this.new_tidal_record(source_line_nr, moon_quarter, date, time, is_dst, hl, height);

        /* TAINT this procedure will likely work if the place of processing is in the same timezone as the
        place where the given data refers to; in the more general case, however, JavaScript as running in NodeJS
        will probably understand dates in terms of the current local at the place of processing and cause
        subtle or not so subtle mismatches between times and dates as intended and as processed.
        
        Also, under the assumptions that each day appears at least once in the data and all days are called up
        sequentially, it suffices to calculate the weekday for the first day called and the cycle through
        the list of weekday names.
         */
        xdate = new XDate(year_txt, month_txt, day_txt);
        Z['weekday-idx'] = (xdate.getDay() + 6) % 7;
        return handler(null, Z);
      };
    })(this));
    return null;
  };

  if (module.parent == null) {
    TIDES = this;
    route = njs_path.join(__dirname, '../tidal-data/Vlieland-haven.txt');
    TIDES.walk_table_rows(route, function(error, table_row) {
      if (error != null) {
        throw error;
      }
      return info(TRM.rainbow(table_row));
    });
  }

}).call(this);
